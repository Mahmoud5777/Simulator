stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest 
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck
  script:
    - echo "=== Structure du projet ==="
    - pwd
    - ls -R
    
    - echo "=== Exécution de Cppcheck ==="
    - cppcheck --enable=all --std=c++17 --xml --output-file=cppcheck_report.xml . 2>&1 | tee cppcheck_console.log
    
    # Affiche un résumé lisible
    - echo "=== Résumé Cppcheck ==="
    - grep -E "<error|</error>" cppcheck_report.xml | sed 's/<error file="/Fichier: /; s/" line="/, Ligne /; s/" msg="/ | Erreur: /; s/"\/>/ /'
    
  artifacts:
    when: always
    paths:
      - cppcheck_report.xml
    reports:
      codequality: cppcheck_report.xml

clang_tidy_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq clang-tidy python3 jq
  script:
    - echo "=== Structure du projet ==="
    - pwd
    - ls -R
    
    # Génération compile_commands.json
    - |
      echo "=== Génération compile_commands.json ==="
      find . -name '*.cpp' | while read -r file; do
        echo '{
          "directory": "'$(pwd)'",
          "command": "g++ -std=c++17 -Iinclude -c '"$file"'",
          "file": "'"$file"'"
        }'
      done | jq -s '.' > compile_commands.json
      cat compile_commands.json | head -n 5
      echo "... (tronqué)"

    # Exécution et affichage clang-tidy
    - |
      echo "=== Exécution de clang-tidy ==="
      if [ -s "compile_commands.json" ]; then
        find . -name '*.cpp' -exec clang-tidy -p . {} + 2>&1 | tee clang-tidy.log
        echo "=== Résumé clang-tidy ==="
        grep -E "warning|error" clang-tidy.log | sort | uniq -c
      else
        echo "ERREUR: Aucun fichier .cpp trouvé !" > clang-tidy.log
        cat clang-tidy.log
      fi

  artifacts:
    when: always
    paths:
      - compile_commands.json
      - clang-tidy.log
    reports:
      codequality: clang-tidy.log