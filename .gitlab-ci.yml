stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest 
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck
  script:
    - pwd    
    - ls -R  
    - cppcheck --enable=all --std=c++17 . 2>&1 | grep -E "error|warning" || true

  artifacts:
    when: always
    paths:
      - cppcheck_report.xml
    reports:
      codequality: cppcheck_report.xml

clang_tidy_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq clang-tidy python3 jq
  script:
    # 1. Debug: afficher la structure (confirmer le contenu)
    - pwd
    - ls -R
    
    # 2. Génération du compile_commands.json
    - |
      echo "Génération du fichier compile_commands.json..."
      find . -name '*.cpp' | while read -r file; do
        echo '{
          "directory": "'$(pwd)'",
          "command": "g++ -std=c++17 -Iinclude -c '"$file"'",
          "file": "'"$file"'"
        }'
      done | jq -s '.' > compile_commands.json

    # 3. Vérification du fichier généré
    - echo "Contenu de compile_commands.json :"
    - head -n 5 compile_commands.json
    - echo "... (truncated)"
    
    # 4. Exécution de clang-tidy
    - |
      if [ -s "compile_commands.json" ]; then
        echo "Lancement de clang-tidy..."
        find . -name '*.cpp' -exec clang-tidy -p . src/*.cpp 2>&1 | grep -E "error|warning" | tee -a clang-tidy.log
      else
        echo "Aucun fichier .cpp trouvé !" > clang-tidy.log
      fi
      
      # Garantir que le fichier existe
      touch clang-tidy.log
      echo "Résumé de l'analyse :"
      tail -n 10 clang-tidy.log || true

  artifacts:
    when: always
    paths:
      - compile_commands.json
      - clang-tidy.log