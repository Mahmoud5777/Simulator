stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest 
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck
  script:
    - pwd    
    - ls -R  
    - cppcheck --enable=all --std=c++17 --xml --output-file=cppcheck_report.xml .

  artifacts:
    when: always
    paths:
      - cppcheck_report.xml
    reports:
      codequality: cppcheck_report.xml

clang_tidy_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq clang-tidy python3-pip  # Ajoutez python3-pip ici
    - pip3 install compiledb
  script:
    # Générer compile_commands.json en simulant une compilation
    - echo '[{"directory":"/builds/mahmoud.ayedi/Simulator","command":"g++ -std=c++17 -I. -c fichier.cpp","file":"fichier.cpp"}]' > compile_commands.json
    
    # Alternative: utiliser compiledb si vous avez une commande de build réelle
    # - compiledb make -B || echo "compiledb a échoué, continuation sans"
    
    # Exécuter clang-tidy sur tous les fichiers .cpp
    - find . -name '*.cpp' -exec clang-tidy {} -p . --checks='*,-modernize-use-trailing-return-type' \; | tee clang-tidy.log
  artifacts:
    when: always  # Même en cas de succès pour inspection
    paths:
      - clang-tidy.log
    reports:
      codequality: clang-tidy.log