stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck
  script:
    - echo "📁 Répertoire actuel :"
    - pwd
    - echo "📂 Liste des fichiers :"
    - ls -R

    - echo "🚀 Lancement de cppcheck..."
    # Exécute cppcheck, redirige stderr vers un fichier pour capturer les erreurs/warnings
    - cppcheck --enable=all --inline-suppr --suppress=missingIncludeSystem --quiet --xml --output-file=cppcheck_report.xml . 2> cppcheck_errors.txt

    - echo "📄 Résultats de cppcheck (stderr) :"
    - if [ -s cppcheck_errors.txt ]; then cat cppcheck_errors.txt; else echo "Aucun problème détecté par cppcheck."; fi

  artifacts:
    when: always
    paths:
      - cppcheck_report.xml
      - cppcheck_errors.txt



#clang_tidy_analysis:
 # stage: test
  #image: ubuntu:latest
  #before_script:
 #   - apt-get update -qq && apt-get install -y -qq clang-tidy python3 jq
 # script:
  #  - echo "📁 Répertoire actuel :"
   # - pwd
    #- echo "📂 Liste des fichiers :"
    #- ls -R

    #- |
     # echo "⚙️ Génération de compile_commands.json..."
      #find . -name '*.cpp' | while read -r file; do
       # echo '{
        #  "directory": "'$(pwd)'",
         # "command": "g++ -std=c++17 -Iinclude -c '"$file"'",
         # "file": "'"$file"'"
        #}'
      #done | jq -s '.' > compile_commands.json

   # - echo "📄 Aperçu du compile_commands.json :"
   # - head -n 5 compile_commands.json
   # - echo "... (truncated)"

    #- |
     # if [ -s "compile_commands.json" ]; then
      #  echo "🚀 Lancement de clang-tidy..."
       # find . -name '*.cpp' -exec clang-tidy -p . {} + > clang-tidy.log 2>&1 || true
     # else
      #  echo "Aucun fichier .cpp trouvé !" > clang-tidy.log
     # fi

   # - echo "📄 Résultats complets de clang-tidy :"
   # - cat clang-tidy.log || echo "Aucune erreur détectée."

   # - echo "🧪 Fin de l’analyse clang-tidy."

 # artifacts:
  #  when: always
   # paths:
    #  - compile_commands.json
     # - clang-tidy.log