stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest 
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck
  script:
    - pwd    
    - ls -R  
    - cppcheck --enable=all --std=c++17 --xml --output-file=cppcheck_report.xml .

  artifacts:
    when: always
    paths:
      - cppcheck_report.xml
    reports:
      codequality: cppcheck_report.xml

clang_tidy_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq clang-tidy python3 jq
  script:
    # 1. Lister tous les .cpp et générer compile_commands.json
    - |
      find src -name '*.cpp' | while read -r file; do
        echo '{
          "directory": "'$(pwd)'",
          "command": "g++ -std=c++17 -Iinclude -c '"$file"'",
          "file": "'"$file"'"
        }'
      done | jq -s '.' > compile_commands.json

    # 2. Vérification (debug)
    - ls -lh compile_commands.json
    - head -n 20 compile_commands.json  # Affiche un extrait

    # 3. Exécuter clang-tidy en parallèle (pour gérer beaucoup de fichiers)
    - find src -name '*.cpp' -print0 | xargs -0 -P4 -n1 clang-tidy -p .
  artifacts:
    when: always
    paths:
      - compile_commands.json
      - clang-tidy.log