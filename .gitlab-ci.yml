stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest 
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck
  script:
    - pwd    
    - ls -R  
    - cppcheck --enable=all --std=c++17 --xml --output-file=cppcheck_report.xml .

  artifacts:
    when: always
    paths:
      - cppcheck_report.xml
    reports:
      codequality: cppcheck_report.xml

clang_tidy_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq clang-tidy python3 jq
  script:
    - pwd
    - ls -R
    
    - |
      echo "Génération du compile_commands.json..."
      find . -name '*.cpp' | while read -r file; do
        echo '{
          "directory": "'$(pwd)'",
          "command": "g++ -std=c++17 -Iinclude -c '"$file"'",
          "file": "'"$file"'"
        }'
      done | jq -s '.' > compile_commands.json

    - echo "Vérification du fichier :"
    - head -n 5 compile_commands.json
    - echo "... (tronqué)"
    
    - |
      if [ -s "compile_commands.json" ]; then
        echo "Lancement de clang-tidy..."
        find . -name '*.cpp' -exec clang-tidy -p . {} + > clang-tidy.log 2>&1 || true
        echo "Résumé :"
        grep -E "warning|error" clang-tidy.log | sort | uniq -c
      else
        echo "Aucun fichier .cpp trouvé !" > clang-tidy.log
      fi
      cat clang-tidy.log

  artifacts:
    when: always
    paths:
      - compile_commands.json
      - clang-tidy.log
    reports:
      codequality: clang-tidy.log