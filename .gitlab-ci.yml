stages:
  - test

cppcheck_analysis:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq cppcheck ccze cmake build-essential libgtest-dev
  script:
    - echo "üìÅ R√©pertoire actuel :"
    - pwd
    - echo "üìÇ Liste des fichiers :"
    - ls -R
    - echo "üöÄ Lancement de Cppcheck dans le dossier courant avec coloration..."
    - cppcheck --enable=all --inconclusive --std=c++17 --force --suppress=missingIncludeSystem . 2>&1 | ccze -A || true
    - echo "üõ†Ô∏è Compilation des tests unitaires"
    - mkdir -p build && cd build
    - cmake ..
    - cmake --build .
    - echo "‚úÖ Ex√©cution des tests unitaires"
    - ./test_executable



#clang_tidy_analysis:
 # stage: test
  #image: ubuntu:latest
  #before_script:
 #   - apt-get update -qq && apt-get install -y -qq clang-tidy python3 jq
 # script:
  #  - echo " R√©pertoire actuel :"
   # - pwd
    #- echo " Liste des fichiers :"
    #- ls -R

    #- |
     # echo " G√©n√©ration de compile_commands.json..."
      #find . -name '*.cpp' | while read -r file; do
       # echo '{
        #  "directory": "'$(pwd)'",
         # "command": "g++ -std=c++17 -Iinclude -c '"$file"'",
         # "file": "'"$file"'"
        #}'
      #done | jq -s '.' > compile_commands.json

   # - echo " Aper√ßu du compile_commands.json :"
   # - head -n 5 compile_commands.json
   # - echo "... (truncated)"

    #- |
     # if [ -s "compile_commands.json" ]; then
      #  echo " Lancement de clang-tidy..."
       # find . -name '*.cpp' -exec clang-tidy -p . {} + > clang-tidy.log 2>&1 || true
     # else
      #  echo "Aucun fichier .cpp trouv√© !" > clang-tidy.log
     # fi

   # - echo " R√©sultats complets de clang-tidy :"
   # - cat clang-tidy.log || echo "Aucune erreur d√©tect√©e."

   # - echo " Fin de l‚Äôanalyse clang-tidy."

 # artifacts:
  #  when: always
   # paths:
    #  - compile_commands.json
     # - clang-tidy.log